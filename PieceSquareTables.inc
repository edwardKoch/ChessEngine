//-------------------------------------------------------
//
// File: PieceSquareTables.inc
// Author: Edward Koch
// Description: Holds the Definitions of the Piece Square Tables
//              taken from https://www.chessprogramming.org/Simplified_Evaluation_Function
//
// Revision History
// Author    Date    Description
//-------------------------------------------------------
// E. Koch    04/14/23    Initial Creation of Piece Square Tables
//-------------------------------------------------------
#pragma once

#include "ChessTypes.h"

// Modified to encourage Fianchetto
const int PAWN_PSQT[BLACK + 1][Chess::NumSquares] = 
{
    // WHITE_PAWN_PSQT
    {
         0,  0,  0,  0,  0,  0,  0,  0,
        50, 50, 50, 50, 50, 50, 50, 50,
        10, 10, 20, 30, 30, 20, 10, 10,
         5,  5, 10, 25, 25, 10,  5,  5,
         0,  0,  0, 20, 20,  0,  0,  0,
         5, 10,-10,  0,  0,-10, 10,  5,
         5,  5, 10,-20,-20, 10,  5,  5,
         0,  0,  0,  0,  0,  0,  0,  0
    },
    // BLACK_PAWN_PSQT - Inverse of WHITE_PAWN_PSQT
    {
         0,  0,  0,  0,  0,  0,  0,  0,
         5,  5, 10,-20,-20, 10,  5,  5,
         5, 10,-10,  0,  0,-10, 10,  5,
         0,  0,  0, 20, 20,  0,  0,  0,
         5,  5, 10, 25, 25, 10,  5,  5,
        10, 10, 20, 30, 30, 20, 10, 10,
        50, 50, 50, 50, 50, 50, 50, 50,
         0,  0,  0,  0,  0,  0,  0,  0
    }
};

const int KNIGHT_PSQT[BLACK + 1][Chess::NumSquares] = 
{
    // WHITE_KNIGHT_PSQT
    {
        -50,-40,-30,-30,-30,-30,-40,-50,
        -40,-20,  0,  0,  0,  0,-20,-40,
        -30,  0, 10, 15, 15, 10,  0,-30,
        -30,  5, 15, 20, 20, 15,  5,-30,
        -30,  0, 15, 20, 20, 15,  0,-30,
        -30,  5, 10, 15, 15, 10,  5,-30,
        -40,-20,  0,  5,  5,  0,-20,-40,
        -50,-40,-30,-30,-30,-30,-40,-50
    },
    // BLACK_KNIGHT_PSQT - Same as WHITE_KNIGHT_PSQT
    {
        -50,-40,-30,-30,-30,-30,-40,-50,
        -40,-20,  0,  0,  0,  0,-20,-40,
        -30,  0, 10, 15, 15, 10,  0,-30,
        -30,  5, 15, 20, 20, 15,  5,-30,
        -30,  0, 15, 20, 20, 15,  0,-30,
        -30,  5, 10, 15, 15, 10,  5,-30,
        -40,-20,  0,  5,  5,  0,-20,-40,
        -50,-40,-30,-30,-30,-30,-40,-50
    }
};

// Modified to encourage Fianchetto
const int BISHOP_PSQT[BLACK + 1][Chess::NumSquares] = 
{
    // WHITE_BISHOP_PSQT
    {
        -20,-10,-10,-10,-10,-10,-10,-20,
        -10,  0,  0,  0,  0,  0,  0,-10,
        -10,  0,  5, 10, 10,  5,  0,-10,
        -10,  5,  5, 10, 10,  5,  5,-10,
        -10,  0, 10, 10, 10, 10,  0,-10,
        -10, 10, 10, 10, 10, 10, 10,-10,
        -10, 25,  0,  0,  0,  0, 25,-10,
        -20,-10,-10,-10,-10,-10,-10,-20
    },
    // BLACK_BISHOP_PSQT - Inverse of WHITE_BISHOP_PSQT
    {
        -20,-10,-10,-10,-10,-10,-10,-20,
        -10, 25,  0,  0,  0,  0, 25,-10,
        -10, 10, 10, 10, 10, 10, 10,-10,
        -10,  0, 10, 10, 10, 10,  0,-10,
        -10,  5,  5, 10, 10,  5,  5,-10,
        -10,  0,  5, 10, 10,  5,  0,-10,
        -10,  0,  0,  0,  0,  0,  0,-10,
        -20,-10,-10,-10,-10,-10,-10,-20
    }
};

const int ROOK_PSQT[BLACK + 1][Chess::NumSquares] = 
{
    // WHITE_ROOK_PSQT
    {
         0,  0,  0,  0,  0,  0,  0,  0,
         5, 10, 10, 10, 10, 10, 10,  5,
        -5,  0,  0,  0,  0,  0,  0, -5,
        -5,  0,  0,  0,  0,  0,  0, -5,
        -5,  0,  0,  0,  0,  0,  0, -5,
        -5,  0,  0,  0,  0,  0,  0, -5,
        -5,  0,  0,  0,  0,  0,  0, -5,
         0,  0,  0,  5,  5,  0,  0,  0
    },
    // BLACK_ROOK_PSQT - Inverse of WHITE_ROOK_PSQT
    {
         0,  0,  0,  5,  5,  0,  0,  0,
        -5,  0,  0,  0,  0,  0,  0, -5,
        -5,  0,  0,  0,  0,  0,  0, -5,
        -5,  0,  0,  0,  0,  0,  0, -5,
        -5,  0,  0,  0,  0,  0,  0, -5,
        -5,  0,  0,  0,  0,  0,  0, -5,
         5, 10, 10, 10, 10, 10, 10,  5,
         0,  0,  0,  0,  0,  0,  0,  0,
    }
};

const int QUEEN_PSQT[BLACK + 1][Chess::NumSquares] = 
{
    // WHITE_QUEEN_PSQT
    {
        -20,-10,-10, -5, -5,-10,-10,-20,
        -10,  0,  0,  0,  0,  0,  0,-10,
        -10,  0,  5,  5,  5,  5,  0,-10,
         -5,  0,  5,  5,  5,  5,  0, -5,
          0,  0,  5,  5,  5,  5,  0, -5,
        -10,  5,  5,  5,  5,  5,  0,-10,
        -10,  0,  5,  0,  0,  0,  0,-10,
        -20,-10,-10, -5, -5,-10,-10,-20
    },
    // BLACK_QUEEN_PSQT - Same as WHITE_QUEEN_PSQT
    {
        -20,-10,-10, -5, -5,-10,-10,-20,
        -10,  0,  0,  0,  0,  0,  0,-10,
        -10,  0,  5,  5,  5,  5,  0,-10,
         -5,  0,  5,  5,  5,  5,  0, -5,
          0,  0,  5,  5,  5,  5,  0, -5,
        -10,  5,  5,  5,  5,  5,  0,-10,
        -10,  0,  5,  0,  0,  0,  0,-10,
        -20,-10,-10, -5, -5,-10,-10,-20
    }
};

// Early/Mid Game King PSQT
const int KING_MG_PSQT[BLACK + 1][Chess::NumSquares] = 
{
    // WHITE_KING_MG_PSQT
    {
        -30,-40,-40,-50,-50,-40,-40,-30,
        -30,-40,-40,-50,-50,-40,-40,-30,
        -30,-40,-40,-50,-50,-40,-40,-30,
        -30,-40,-40,-50,-50,-40,-40,-30,
        -20,-30,-30,-40,-40,-30,-30,-20,
        -10,-20,-20,-20,-20,-20,-20,-10,
         20, 20,  0,  0,  0,  0, 20, 20,
         20, 30, 10,  0,  0, 10, 30, 20
    },
    // BLACK_KING_MG_PSQT - Inverse of WHITE_KING_MG_PSQT
    {
         20, 30, 10,  0,  0, 10, 30, 20,
         20, 20,  0,  0,  0,  0, 20, 20,
        -10,-20,-20,-20,-20,-20,-20,-10,
        -20,-30,-30,-40,-40,-30,-30,-20,
        -30,-40,-40,-50,-50,-40,-40,-30,
        -30,-40,-40,-50,-50,-40,-40,-30,
        -30,-40,-40,-50,-50,-40,-40,-30,
        -30,-40,-40,-50,-50,-40,-40,-30
    }
};

// End Game King PSQT
const int KING_EG_PSQT[BLACK + 1][Chess::NumSquares] = 
{
    // WHITE_KING_EG_PSQT
    {
        -50,-40,-30,-20,-20,-30,-40,-50,
        -30,-20,-10,  0,  0,-10,-20,-30,
        -30,-10, 20, 30, 30, 20,-10,-30,
        -30,-10, 30, 40, 40, 30,-10,-30,
        -30,-10, 30, 40, 40, 30,-10,-30,
        -30,-10, 20, 30, 30, 20,-10,-30,
        -30,-30,  0,  0,  0,  0,-30,-30,
        -50,-30,-30,-30,-30,-30,-30,-50
    },
    // BLACK_KING_EG_PSQT - Inverse of WHITE_KING_EG_PSQT
    {
        -50,-30,-30,-30,-30,-30,-30,-50
        -30,-30,  0,  0,  0,  0,-30,-30,
        -30,-10, 20, 30, 30, 20,-10,-30,
        -30,-10, 30, 40, 40, 30,-10,-30,
        -30,-10, 30, 40, 40, 30,-10,-30,
        -30,-10, 20, 30, 30, 20,-10,-30,
        -30,-20,-10,  0,  0,-10,-20,-30,
        -50,-40,-30,-20,-20,-30,-40,-50
    }
};